[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "delfino-docker"
version = "5.0.0"
description = "A delfino plugin with helper scripts for working with docker."
readme = "README.md"
license = {text = "MIT License"}
authors = [
    {name = "Radek Lat", email = "radek.lat@gmail.com"}
]
homepage = "https://github.com/radeklat/delfino-docker"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Utilities",
]
requires-python = ">=3.10.0"
dependencies = [
    "delfino>=5.0.1",
    "packaging>=23.0",
]

[dependency-groups]
dev = [
    "types-toml",
    "delfino-core[verify]>=10.0.1",
    "gitpython>=3.1",
]

[project.entry-points."delfino.plugin"]
"delfino-docker" = "delfino_docker"

[tool.pytest.ini_options]
testpaths = "tests/unit tests/integration"
junit_family = "xunit2"

# Structure: https://docs.pytest.org/en/stable/warnings.html
# Values:    https://docs.python.org/3/library/warnings.html#describing-warning-filters
#            action:message:category:module:line
filterwarnings = [

]

markers = [
]

[tool.mypy]
show_column_numbers = true
show_error_codes = true
color_output = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
follow_imports = "silent"

[[tool.mypy.overrides]]
# Source code dependencies
module = [
    "delfino.*",
    "delfino_core.*",
]
ignore_missing_imports = true

[tool.delfino.plugins.delfino-core]

[tool.ruff]
line-length = 120
fix = true
output-format = "concise"

[tool.ruff.lint]
select = [
    "C90", # mccabe
    "D",   # pydocstyle
    "E",   # pycodestyle, errors
    "F",   # Pyflakes
    "I",   # isort
    "N",   # PEP8-naming
    "PL",  # Pylint
    "UP",  # pyupgrade
    "W",   # pycodestyle, warning
]
ignore = [
    # See https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "D1",  # Missing docstrings. We rely on code reviews. Names are often descriptive enough and don't need additional docstring.
    "D401",  # "First line should be in imperative mood"
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D102",  # missing-documentation-for-public-method
]

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.field_validator"]

[tool.ruff.lint.mccabe]
max-complexity = 10
